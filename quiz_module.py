import logging
import random
import vk_api
import requests
from questionnaire import questions, animals_descriptions, animals
import os
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from error_handler import ErrorHandledClass, error_handler_decorator
from urllib.parse import urlencode
from config import vk_app_id, vk_secure_key, vk_service_key

error_handler = ErrorHandledClass()

logger = logging.getLogger(__name__)


import json
@error_handler_decorator
class UserData:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = {}

    def load(self):
        try:
            with open(self.file_path, 'r') as file:
                self.data = json.load(file)
        except FileNotFoundError:
            # If the file doesn't exist, initialize an empty dictionary
            self.data = {}

    def save(self):
        with open(self.file_path, 'w') as file:
            json.dump(self.data, file)

    # Define getter and setter methods for individual attributes
    @property
    def current_question_index(self):
        return self.data.get("current_question_index", 0)

    @current_question_index.setter
    def current_question_index(self, value):
        self.data["current_question_index"] = value

    @property
    def correct_answers_count(self):
        return self.data.get("correct_answers_count", 0)

    @correct_answers_count.setter
    def correct_answers_count(self, value):
        self.data["correct_answers_count"] = value


    @property
    def animals(self):
        return self.data.get("animals", animals)

    @animals.setter
    def animals(self, value):
        self.data["animals"] = value

@error_handler_decorator
class Quiz:
    def __init__(self, bot, message, user_id):
        self.bot = bot
        self.bot_username = "https://t.me/Zoo_quiz_bot"
        self.message = message
        self.photo = []
        self.user_id = user_id
        self.user_data = UserData("user_data.json")
        self.user_data.load()

        # Initialize or reset user data attributes
        self.user_data.used_questions = set()
        self.user_data.current_question_index = 0
        self.user_data.correct_answers_count = 0
        self.user_data.animals = animals
        self.user_data.totem_animal = None
        self.user_data.current_question = None
        self.user_data.question_message = None

        #–í–æ–ø—Ä–æ—Å—ã
        self.questions=questions


        # –°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑
        self.phrases = [
            "–≠—Ç–æ –±—ã–ª –∫–ª–∞—Å—Å–Ω—ã–π –æ—Ç–≤–µ—Ç!",
            "–ö—Ä—É—Ç–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
            "–ó–¥–æ—Ä–æ–≤–æ! –í—ã –º–æ–ª–æ–¥–µ—Ü!",
            "–£–∑–Ω–∞—ë–º –æ –≤–∞—Å –≤—Å—ë –±–æ–ª—å—à–µ –∏ –±–æ–ª—å—à–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!",
            "–û, –∫–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
            "–û–≥–æ, –Ω–µ –∑–Ω–∞–ª!",

        ]

        # –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∫–∞–∂–¥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        self.animals_descriptions = animals_descriptions

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏
        self.program_info = (
            "–ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –æ–ø–µ–∫–µ –æ –ø—Ä–∏—Ä–æ–¥–µ –∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–∏–∑–≤–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∑–∞—â–∏—â–∞—Ç—å –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –Ω–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç—ã. "
            "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å –∏ —É—Ö–æ–¥ –∑–∞ –∂–∏–≤–æ—Ç–Ω—ã–º–∏, –∞ —Ç–∞–∫–∂–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∏—Ö –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–æ–æ–±–∏—Ç–∞–Ω–∏–π. "
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è!"
        )

        # URL —Å–∞–π—Ç–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞
        self.zoo_website_url = "https://www.moscowzoo.ru/my-zoo/become-a-guardian/"

        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        self.animals_folder = "animals"

        #–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ—Ü—Å–µ—Ç–µ–π:
        self.vk_app_id = vk_app_id
        self.vk_secure_key = vk_secure_key
        self.vk_service_key = vk_service_key
        self.vk_redirect_url = "https://d474-145-108-246-137.ngrok-free.app/auth/vk/callback"  #d474-145-108-246-137.ngrok-free.app –ø–æ–ª—É—á–µ–Ω —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–∞ ngrok!


    def start_quiz(self):
        logger.info("User %s started the quiz.", self.message.from_user.first_name)
        self.send_question()

    def send_question(self):
        if not self.user_data.current_question:
            unused_questions = list(set(self.questions.keys()) - self.user_data.used_questions)
            if not unused_questions:
                self.finish_quiz()
                return
            self.user_data.current_question = random.choice(unused_questions)

        options = self.questions[self.user_data.current_question]
        self.user_data.question_message = f"{self.user_data.current_question}\n\n"
        for option in options:
            self.user_data.question_message += f"{option}. {options[option]['text']}\n"
        self.bot.send_message(self.message.chat.id, self.user_data.question_message)

    def handle_answer(self, user_answer):
        question_text = self.user_data.current_question
        if user_answer not in self.questions[question_text]:
            self.bot.send_message(self.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.bot.send_message(self.message.chat.id, self.user_data.question_message)
            return

        animal = self.questions[question_text][user_answer]['animal']
        self.user_data.animals[animal] = self.user_data.animals.get(animal, 0) + 1
        self.user_data.used_questions.add(question_text)

        # –í—ã–≤–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
        random_phrase = random.choice(list(self.phrases))
        self.bot.send_message(self.message.chat.id, random_phrase)

        self.user_data.current_question = None
        self.send_question()

    def restart_quiz(self, message, user_id=None):
        if message.text.lower() == '–¥–∞':
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
            self.user_data.used_questions = set()
            self.user_data.current_question_index = 0
            self.user_data.correct_answers_count = 0
            self.user_data.animals = animals
            self.start_quiz()
        elif message.text.lower() == '–Ω–µ—Ç':
            bye_message = "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –∏ –∂–¥—ë–º –í–∞—Å —Å–Ω–æ–≤–∞!üòä"
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            with open('bye.jpg', 'rb') as photo:
                self.bot.send_photo(self.message.chat.id, photo, caption=bye_message)
        else:
            self.bot.send_message(self.message.chat.id, "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ? –í–≤–µ–¥–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            self.bot.register_next_step_handler(message, self.restart_quiz)  # –£–±—Ä–∞–ª–∏ user_id –∏–∑ –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏

    # –ò–∑–º–µ–Ω—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–∞ finish_quiz, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç code
    def finish_quiz(self):
        animals = self.user_data.animals
        self.user_data.totem_animal = max(animals, key=animals.get)
        message_text = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {self.user_data.totem_animal}. "
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        if self.user_data.totem_animal in self.animals_descriptions:
            message_text += f"{self.animals_descriptions[self.user_data.totem_animal]}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        photo_path = os.path.join(self.animals_folder, f"{self.user_data.totem_animal}.jpg")
        if os.path.exists(photo_path):
            with open(photo_path, "rb") as photo:
                self.photo = self.bot.send_photo(self.message.chat.id, photo, caption=message_text)

        else:
            self.bot.send_message(self.message.chat.id,
                                  message_text + "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —ç—Ç–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞üòî")


        self.user_data.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –∏ –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ VK
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± –æ–ø–µ–∫–µ?", url=self.zoo_website_url))
        #keyboard.add(InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π", callback_data='social_network_post', url=self.vk_authorization_url))
        # Add a button for social network support
        keyboard.add(InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π", callback_data='social_network_support'))

        keyboard.add(InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–∞", callback_data='forward_results'))
        keyboard.add(InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='leave_feedback'))
        keyboard.add(InlineKeyboardButton("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞?", callback_data='restart_quiz'))

        self.bot.send_message(self.message.chat.id, self.program_info, reply_markup=keyboard)



    def get_authorization_url(self, client_id, redirect_uri):
        params = {
                "client_id": self.vk_app_id,
                "redirect_uri": self.vk_redirect_url,
                "scope": "wall",
                "response_type": "code",
                "display": "page"
        }
        url = f"https://oauth.vk.com/authorize?{urlencode(params)}"
        return url


    def handle_callback_query(self, call: CallbackQuery):

        if call.data == 'restart_quiz':
            # Restart the quiz
            self.restart_quiz(call.message)
        elif call.data == 'leave_feedback':
            self.bot.send_message(call.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
            self.bot.register_next_step_handler(call.message, self.process_feedback)

        if call.data == 'forward_results':  # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–∞"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–æ–æ–ø–∞—Ä–∫–∞:")

            # –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–æ–æ–ø–∞—Ä–∫–∞
            self.bot.register_next_step_handler(call.message, self.send_message_to_zoo_employee)



        elif call.data == 'social_network_support':
            # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ URL
            auth_url = self.get_authorization_url(self.vk_app_id, self.vk_redirect_url)
            # –°–æ–∑–¥–∞–µ–º InlineKeyboardButton —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º URL
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("VK", url=auth_url))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤ –±–æ—Ç
            self.bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞, –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ VK:",
                                  reply_markup=keyboard)



    def handle_vk_authorization(self, code):
        try:
            print("Handling VK authorization...")
            # –û–±–º–µ–Ω –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            access_token = self.exchange_code_for_access_token(code)
            print("Received access token.")
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ access token –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–∞ —Å—Ç–µ–Ω–µ VK
            self.publish_quiz_results(access_token)
        except RuntimeError as e:
            logger.error(f"Failed VK authorization: {e}")
            self.bot.send_message(self.message.chat.id, "Failed to authorize with VK. Please try again later.")

    def exchange_code_for_access_token(self, code):
        token_url = "https://oauth.vk.com/access_token"
        params = {
            "client_id": self.vk_app_id,
            "client_secret": self.vk_secure_key,
            "redirect_uri": self.vk_redirect_url,
            "code": code
        }
        response = requests.get(token_url, params=params)
        if response.status_code == 200:
            data = response.json()
            access_token = data.get("access_token")
            if access_token:
                return access_token
            else:
                raise ValueError("Access token not found in the response.")
        else:
            raise RuntimeError("Failed to exchange authorization code for access token.")

    def publish_quiz_results(self, access_token):
        try:
            print("Publishing quiz results on VKontakte...")
            vk_session = vk_api.VkApi(token=access_token)
            vk = vk_session.get_api()

            message = f"–Ø –ø—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –º–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {self.user_data.totem_animal}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–∞–º–∏ –≤ {self.bot_username}."
            print("Message to be posted on VK:", message)
            vk.wall.post(owner_id=self.user_id, message=message)

            print("Successfully posted quiz results on VKontakte.")
        except vk_api.VkApiError as error_msg:
            raise RuntimeError(f"Failed to post quiz results on VKontakte: {error_msg}")


    def process_feedback(self, message):
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        feedback = message.text
        user_id = message.from_user.id
        # –ó–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with open("feedback_from_users_zoo_bot.txt", "a") as file:
            file.write(f"User ID: {user_id}, Feedback: {feedback}\n")
        self.bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

    def send_message_to_zoo_employee(self,message):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = message.text

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name = message.from_user.username

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –¥–æ–±–∞–≤–ª—è—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_to_manager = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç @{user_name}. –Ø –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –º–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {self.user_data.totem_animal}. –Ø —Ö–æ—á—É –ø–µ—Ä–µ–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")

        # –ù–∏–∫–Ω–µ–π–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–æ–æ–ø–∞—Ä–∫–∞:
        zoo_employee_username = "1382756222"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –Ω–∏–∫–Ω–µ–π–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–æ–æ–ø–∞—Ä–∫–∞

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        self.bot.send_message(zoo_employee_username, message_to_manager)


        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        self.bot.send_message(message.chat.id, f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–æ–æ–ø–∞—Ä–∫–∞ üòá. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_to_manager}")



