import logging
import telebot
from flask import Flask, request, jsonify
from quiz_module import Quiz
from config import TOKEN
from telebot.types import CallbackQuery
from error_handler import ErrorHandledClass, error_handler_decorator
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN, threaded=False)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º long polling


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ ErrorHandler
error_handler = ErrorHandledClass()


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ
quiz_instances = {}

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
authorization_code = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VK
@app.route('/auth/vk/callback', methods=['GET'])
@error_handler_decorator
def vk_callback():
    global authorization_code
    code = request.args.get('code')
    if code:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        authorization_code = code

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Quiz
        quiz_instance = Quiz(bot, None, None)

        # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ handle_vk_authorization –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ—Å–ª–µ–¥—É–±—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Ä–µ–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ VK
        quiz_instance.handle_vk_authorization(code)

        return jsonify({"ok": True, "code": code})
    else:
        return jsonify({"error": "No code found"}), 400

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
@error_handler_decorator
def start(message):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    with open('hello.jpg', 'rb') as photo:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name} üòä, –º—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –±–æ—Ç–µ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –ó–æ–æ–ø–∞—Ä–∫–∞!\n\n"
                           "–ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –í—ã —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫–æ–µ —É –í–∞—Å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:)\n\n"
                           "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?üòá\n\n"
                           "–í–≤–µ–¥–∏—Ç–µ /quiz –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n\n"
                           "–í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞\n\n"
                           "–£–¥–∞—á–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ –º–∏—Ä –∂–∏–≤–æ—Ç–Ω—ã—Ö üòä")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_photo(message.chat.id, photo, caption=welcome_message)


@bot.message_handler(commands=['help'])
@error_handler_decorator
def send_instructions(message):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    with open('help.jpg', 'rb') as photo:
        instructions = f"–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞:\n"
        instructions += " \n"
        instructions += "1. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–µ—Ç–µ —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ"
        instructions += " \n\n"
        instructions += "2. –î–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å –±–ª–∏–∑–∫–∏–º–∏ –∏ –¥—Ä—É–∑—å—è–º–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö (–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è VK)"
        instructions += " \n\n"
        instructions += "3. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ, –Ω–∞–º –±—É–¥–µ—Ç –±–µ–∑—É–º–Ω–æ –ø—Ä–∏—è—Ç–Ω–æüòä"
        instructions += " \n\n"
        instructions += "4. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–æ–æ–ø–∞—Ä–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"
        instructions += " \n\n"
        instructions += "–í–≤–µ–¥–∏—Ç–µ /quiz –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n\n"

        bot.send_photo(message.chat.id, photo, caption=instructions)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz

@bot.message_handler(commands=['quiz'])
@error_handler_decorator
def start_quiz_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    if chat_id not in quiz_instances:
        quiz_instance = Quiz(bot, message, user_id)  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Quiz
        quiz_instances[chat_id] = quiz_instance  # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤ —Å–ª–æ–≤–∞—Ä—å quiz_instances
        quiz_instance.start_quiz()  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

@bot.message_handler(func=lambda message: True)
@error_handler_decorator
def handle_message(message):
    user = message.from_user
    text_received = message.text
    logger.info("User %s sent message: %s", user.first_name, text_received)

    # –ï—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä Quiz —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if message.chat.id in quiz_instances:
        quiz_instances[message.chat.id].handle_answer(text_received)
    else:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—Éüòî, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞üòá")

# Add a handler for callback queries

@bot.callback_query_handler(func=lambda call: True)
@error_handler_decorator
def handle_callback_query(call: CallbackQuery):
    chat_id = call.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

    if chat_id in quiz_instances:
        # Pass the callback query to the Quiz instance for handling
        quiz_instances[chat_id].handle_callback_query(call)
    else:
        # Handle the case where the chat_id is not found in quiz_instances
        bot.send_message(chat_id, "Quiz instance not found. Please start a quiz first.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–æ–≤
@app.route('/', methods=['POST'])
def handle_post_request():
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
    return 'OK', 200


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@error_handler_decorator
def main():
    bot.remove_webhook()  # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
    print("Webhook removed successfully.")  # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
    bot_polling_thread = threading.Thread(target=bot_polling)
    bot_polling_thread.start()

    app.run(port=5001)  # –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É 5001


def bot_polling():
    while True:
        try:
            bot.infinity_polling(none_stop=True)
        except Exception as e:
            logger.error("Polling exception: {}".format(e))
            time.sleep(5)


if __name__ == '__main__':
    main()

