import logging
import telebot
from quiz_module import Quiz
from config import TOKEN
from telebot.types import CallbackQuery
from error_handler import ErrorHandledClass, error_handler_decorator


import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ ErrorHandler
error_handler = ErrorHandledClass()



# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ
quiz_instances = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

@bot.message_handler(commands=['start'])
@error_handler_decorator
def start(message):
    user = message.from_user
    logger.info("User %s started the conversation.", user.first_name)
    welcome_message = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}üòä –≤ –ë–æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –ó–æ–æ–ø–∞—Ä–∫–∞!\n\n"
                      "–ü—Ä–æ–π–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫–æ–µ —É —Ç–µ–±—è —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:)\n\n"
                      "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ /quiz —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /help")
    bot.reply_to(message, welcome_message)


@bot.message_handler(commands=['help'])
@error_handler_decorator
def send_instructions(message):
        instructions = f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞:!\n"
        instructions += " \n\n"
        instructions += "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç—Ä–∏–Ω—É, –≤–≤–µ–¥–∏—Ç–µ /quiz."
        bot.reply_to(message, instructions)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz

@bot.message_handler(commands=['quiz'])
@error_handler_decorator
def start_quiz_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    if chat_id not in quiz_instances:
        quiz_instance = Quiz(bot, message, user_id)  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Quiz
        quiz_instances[chat_id] = quiz_instance  # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤ —Å–ª–æ–≤–∞—Ä—å quiz_instances
        quiz_instance.start_quiz()  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

@bot.message_handler(func=lambda message: True)
@error_handler_decorator
def handle_message(message):
    user = message.from_user
    text_received = message.text
    logger.info("User %s sent message: %s", user.first_name, text_received)

    # –ï—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä Quiz —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if message.chat.id in quiz_instances:
        quiz_instances[message.chat.id].handle_answer(text_received)
    else:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—Éüòî, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞?üòá")

# Add a handler for callback queries

@bot.callback_query_handler(func=lambda call: True)
@error_handler_decorator
def handle_callback_query(call: CallbackQuery):
    chat_id = call.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    print(f"Received callback query from chat_id: {chat_id}")
    print("Received callback query data:", call.data)

    if chat_id in quiz_instances:
        # Pass the callback query to the Quiz instance for handling
        quiz_instances[chat_id].handle_callback_query(call)
    else:
        # Handle the case where the chat_id is not found in quiz_instances
        bot.send_message(chat_id, "Quiz instance not found. Please start a quiz first.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@error_handler_decorator
def main():
    bot.polling()

if __name__ == '__main__':
    main()